import requests
import telegram
import time
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from urllib.parse import urlparse

# =======================================================
#               1. C·∫§U H√åNH B·∫ÆT BU·ªòC (C·∫¨P NH·∫¨T T·∫†I ƒê√ÇY)
# =======================================================
BOT_TOKEN = "8170628944:AAFgSld7haAF0n8Y5kMamDYWtQkTSsKb_dA" # <-- THAY B·∫∞NG TOKEN C·ª¶A B·∫†N
# CHAT_ID T√πy ch·ªçn (ƒë∆∞·ª£c d√πng ƒë·ªÉ gi·ªõi h·∫°n ng∆∞·ªùi d√πng c√≥ quy·ªÅn admin)
ADMIN_CHAT_ID = 7123827128           # <-- THAY B·∫∞NG CHAT ID C·ª¶A B·∫†N (S·ª≠ d·ª•ng s·ªë nguy√™n - kh√¥ng d√πng chu·ªói "")

# =======================================================
#               2. C·∫§U H√åNH H·ªÜ TH·ªêNG
# =======================================================
INPUT_FILE = "check_list.txt"
CHECK_INTERVAL = 5 # Th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn check (gi√¢y)
TIMEOUT = 15       # Timeout cho m·ªói y√™u c·∫ßu HTTP (gi√¢y)

HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36',
    'Accept-Language': 'vi-VN,vi;q=0.9,en-US;q=0.8,en;q=0.7',
}

# --- C√ÅC H√ÄM X·ª¨ L√ù L∆ØU TR·ªÆ ---

def read_links():
    """ƒê·ªçc danh s√°ch link/UID hi·ªán t·∫°i t·ª´ file."""
    if not os.path.exists(INPUT_FILE):
        return set()
    with open(INPUT_FILE, 'r', encoding='utf-8') as f:
        # S·ª≠ d·ª•ng set ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≥ link tr√πng l·∫∑p
        return {line.strip() for line in f if line.strip()}

def write_links(links_set):
    """Ghi danh s√°ch link/UID m·ªõi v√†o file."""
    with open(INPUT_FILE, 'w', encoding='utf-8') as f:
        for link in sorted(list(links_set)):
            f.write(link + '\n')

def normalize_input(raw_input):
    """Chu·∫©n h√≥a UID/Link (H√†m n√†y gi·ªØ nguy√™n t·ª´ bot c≈©)."""
    link = raw_input.strip()
    if not link: return None
    if link.isdigit() and len(link) > 10:
        return link # Tr·∫£ v·ªÅ UID th√¥ ƒë·ªÉ d·ªÖ d√†ng qu·∫£n l√Ω trong file
    if 'facebook.com' in link or 'fb.com' in link:
        return link
    return None

def check_link_status(link):
    """G·ª≠i y√™u c·∫ßu HTTP GET ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i c√¥ng khai (H√†m n√†y gi·ªØ nguy√™n)."""
    # N·∫øu l√† UID, ta chuy·ªÉn th√†nh URL ƒë·ªÉ check
    check_url = f"https://www.facebook.com/profile.php?id={link}" if link.isdigit() and len(link) > 10 else link
    
    try:
        response = requests.get(check_url, headers=HEADERS, timeout=TIMEOUT, allow_redirects=True)
        if response.status_code == 200:
            if 'login.php' in response.url or 'checkpoint' in response.text or 'B·∫°n ph·∫£i ƒëƒÉng nh·∫≠p' in response.text:
                return "BLOCKED/LOGIN_REQUIRED" 
            return "LIVE"
        elif response.status_code == 404:
            return "DIE"
        else:
            return f"UNKNOWN (Status: {response.status_code})"
    except requests.exceptions.Timeout:
        return "ERROR_TIMEOUT" 
    except requests.exceptions.ConnectionError:
        return "ERROR_CONNECTION" 
    except Exception as e:
        return f"ERROR_OTHER ({type(e).__name__})"

# --- C√ÅC H√ÄM X·ª¨ L√ù L·ªÜNH TELEGRAM ---

async def check_admin(update: Update):
    """Ki·ªÉm tra quy·ªÅn admin d·ª±a tr√™n CHAT_ID."""
    if update.effective_chat.id != ADMIN_CHAT_ID:
        await update.message.reply_text("üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.")
        return False
    return True

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """X·ª≠ l√Ω l·ªánh /start."""
    await update.message.reply_text(
        f"Xin ch√†o {update.effective_user.first_name}!\n"
        "Bot ƒë√£ s·∫µn s√†ng.\n\n"
        "C√°c l·ªánh qu·∫£n l√Ω:\n"
        "üëâ /add [link/uid]: Th√™m v√†o danh s√°ch.\n"
        "üëâ /remove [link/uid]: X√≥a kh·ªèi danh s√°ch.\n"
        "üëâ /list: Xem danh s√°ch hi·ªán t·∫°i.\n"
        "üëâ /check: Ch·∫°y ki·ªÉm tra t·∫•t c·∫£ m·ª•c (Ch·ªâ admin).\n"
    )

async def add_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """X·ª≠ l√Ω l·ªánh /add [link/uid]."""
    if not await check_admin(update): return

    if not context.args:
        await update.message.reply_text("C√∫ ph√°p: /add [link ho·∫∑c uid]")
        return

    raw_input = context.args[0]
    normalized = normalize_input(raw_input)

    if not normalized:
        await update.message.reply_text("‚ùå Input kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p UID (ch·ªâ s·ªë) ho·∫∑c Link FB.")
        return
        
    links = read_links()
    if normalized in links:
        await update.message.reply_text(f"‚ö†Ô∏è `{normalized}` ƒë√£ c√≥ trong danh s√°ch.")
    else:
        links.add(normalized)
        write_links(links)
        await update.message.reply_text(f"‚úÖ ƒê√£ th√™m `{normalized}` v√†o danh s√°ch.")

async def remove_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """X·ª≠ l√Ω l·ªánh /remove [link/uid]."""
    if not await check_admin(update): return

    if not context.args:
        await update.message.reply_text("C√∫ ph√°p: /remove [link ho·∫∑c uid]")
        return
        
    raw_input = context.args[0]
    normalized = normalize_input(raw_input)

    if not normalized:
        await update.message.reply_text("‚ùå Input kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p UID (ch·ªâ s·ªë) ho·∫∑c Link FB.")
        return

    links = read_links()
    if normalized in links:
        links.remove(normalized)
        write_links(links)
        await update.message.reply_text(f"‚úÖ ƒê√£ x√≥a `{normalized}` kh·ªèi danh s√°ch.")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è `{normalized}` kh√¥ng c√≥ trong danh s√°ch.")

async def list_links(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """X·ª≠ l√Ω l·ªánh /list."""
    links = read_links()
    if not links:
        await update.message.reply_text("Danh s√°ch ki·ªÉm tra hi·ªán ƒëang tr·ªëng.")
        return

    link_list_str = "\n".join(sorted(list(links)))
    message = f"üìã **DANH S√ÅCH KI·ªÇM TRA ({len(links)} m·ª•c):**\n```\n{link_list_str}\n```"
    await update.message.reply_text(message, parse_mode=telegram.ParseMode.MARKDOWN)

async def check_all_links(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """X·ª≠ l√Ω l·ªánh /check: Ch·∫°y to√†n b·ªô qu√° tr√¨nh ki·ªÉm tra."""
    if not await check_admin(update): return
    
    links = read_links()
    if not links:
        await update.message.reply_text("‚ö†Ô∏è Danh s√°ch tr·ªëng, kh√¥ng c√≥ g√¨ ƒë·ªÉ ki·ªÉm tra.")
        return

    await update.message.reply_text(f"‚öôÔ∏è B·∫Øt ƒë·∫ßu ki·ªÉm tra **{len(links)}** m·ª•c. Vui l√≤ng ch·ªù...")

    live_count = 0
    die_count = 0
    unknown_count = 0
    
    # Th·ª±c hi·ªán ki·ªÉm tra
    for i, link in enumerate(links):
        status = check_link_status(link)
        
        if status == "LIVE":
            live_count += 1
        elif status == "DIE":
            die_count += 1
            await update.message.reply_text(f"üî¥ **DIE** | ({i+1}/{len(links)}) | `{link}`", parse_mode=telegram.ParseMode.MARKDOWN)
        else:
            unknown_count += 1
            await update.message.reply_text(f"üü° **{status}** | ({i+1}/{len(links)}) | `{link}`", parse_mode=telegram.ParseMode.MARKDOWN)
        
        time.sleep(CHECK_INTERVAL)

    # B√°o c√°o t·ªïng k·∫øt
    summary_msg = f"""
üèÅ **KI·ªÇM TRA HO√ÄN T·∫§T**
T·ªïng c·ªông: **{len(links)}** m·ª•c
- LIVE (C√¥ng khai): **{live_count}**
- DIE (Kh√¥ng t·ªìn t·∫°i): **{die_count}**
- L·ªói/Kh√¥ng x√°c ƒë·ªãnh: **{unknown_count}**
    """
    await update.message.reply_text(summary_msg, parse_mode=telegram.ParseMode.MARKDOWN)


def main():
    """H√†m ch√≠nh ƒë·ªÉ kh·ªüi t·∫°o v√† ch·∫°y bot Telegram."""
    try:
        # Kh·ªüi t·∫°o Application
        application = Application.builder().token(BOT_TOKEN).build()
        
        # Th√™m c√°c tr√¨nh x·ª≠ l√Ω l·ªánh
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("add", add_link))
        application.add_handler(CommandHandler("remove", remove_link))
        application.add_handler(CommandHandler("list", list_links))
        application.add_handler(CommandHandler("check", check_all_links))

        print("--- FB MANAGER BOT ƒêANG CH·∫†Y ---")
        print(f"Admin CHAT ID: {ADMIN_CHAT_ID}")
        print("Bot ƒëang l·∫Øng nghe c√°c l·ªánh t·ª´ Telegram...")
        
        # Ch·∫°y bot (l·∫Øng nghe li√™n t·ª•c)
        application.run_polling(poll_interval=1)
        
    except Exception as e:
        print(f"L·ªñI KH·ªûI T·∫†O BOT: {e}")

if __name__ == "__main__":
    main()
